# 
#  [Properties To YAML]
#  http://www.allencoders.online/converters/props2yaml
# 
# 

### server ############################################
# server.port: 8080
server.shutdown=graceful

### session ############################################
# Session store type. [jdbc|redis|hazelcast|mongodb]
spring.session.store-type=jdbc
# Session timeout. If a duration suffix is not specified, seconds will be used.
server.servlet.session.timeout= 300
# Database schema initialization mode. [alwys | never | embedded]
spring.session.jdbc.initialize-schema=always 
# Path to the SQL file to use to initialize the database schema.(see: https://github.com/spring-projects/spring-session/tree/master/spring-session-jdbc/src/main/resources/org/springframework/session/jdbc)
# spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql
spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-h2.sql
# custom spring session table name (see : https://github.com/spring-projects/spring-session/issues/1230) 
spring.session.jdbc.table-name=SPRING_SESSION

### actuator ##########################################
# management.server.port: 9001
# management.server.address: 127.0.0.1
management.endpoints.web.exposure.include=*
# management.endpoints.web.exposure.include=health,info,wavefront
# management.endpoints.web.exposure.exclude=env,beans

# http://localhost:8080/actuator
# beans	            application의 전체 Spring beans를 출력
# caches	        사용가능한 cache를 노출
# conditions	  configuration 또는 auto-configuration 되는 class들의 성공 여부와 이유를 설명
# env	              Spring Boot의 현재 환경설정 정보(application.yml의 정보 등)를 출력
# health	        application의 현재 상태를 보여줍니다.
# httptrace	       http를 trace한 정보를 노출(기본적으로 최신 100건의 reqest-response를 보여줍니다.)
# mappings	    Request와 mapping되어있는 handler 정보를 가져옵니다.
# sessions	       Spring Session이 가지고 있는 정보를 가져옵니다.
# threaddump threaddump를 가져옴
# logfile	         log를 가져옵니다.
# metrics	       metrics 정보를 노출합니다.

### datasource ########################################
# h2
spring.datasource.url=jdbc:h2:~/temp/spring-study;
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# mariadb
# spring.datasource.url=jdbc:mariadb://193.123.255.92:3306/db_example?allowMultiQueries=true
# spring.datasource.username=springuser
# spring.datasource.password=study123
# spring.datasource.driver-class-name =org.mariadb.jdbc.Driver

# h2 , mariadb
spring.sql.init.platform=h2
spring.sql.init.mode:always
# spring.sql.init.schema-locations=classpath*:db/vendor/schema.sql

spring.datasource.hikari.maximum-pool-size=4

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
    # none: The default for MySQL. No change is made to the database structure.
    # update: Hibernate changes the database according to the given entity structures.
    # create: Creates the database every time but does not drop it on close.
    # create-drop: Creates the database and drops it when SessionFactory closes.
spring.jpa.show-sql: true

### mybatis ###########################################
mybatis.mapper-locations: mybatis-mapper/**/*.xml
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.type-aliases-package=com.example.springwork.domain
logging.level.com.example.springwork.dao.mapper=TRACE

### h2 ###############################################
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console

### batch ###############################################
spring.batch.jdbc.initialize-schema=always
# spring.batch.jdbc.initialize-schema=naver

### ldap ###############################################
spring.ldap.embedded.ldif=classpath:test-server.ldif
spring.ldap.embedded.base-dn=dc=springframework,dc=org
spring.ldap.embedded.port=8389


### Tuning File Upload Limits
# spring.servlet.multipart.max-file-size=128KB
# spring.servlet.multipart.max-request-size=128KB


### mail ###############################################
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

### log ##############################################
logging.level.org.springframework.web=debug		
logging.level.sql=error
logging.level.org.hibernate.SQL=off
logging.level.jdbc=error
logging.level.jdbc.sqlonly=debug

#max-history 설정 안하면 디폴트가 30이라 30일 이후의 로그는 자동 삭제된다. 필수로 해야함.
logging.file.name=logs/app.log
logging.logback.rollingpolicy.max-history=9999999
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}-%i.log

#  로그 패턴 설정
logging.pattern.console=%-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n
logging.pattern.file= %-5level %d{yyyy-MM-dd HH:mm:ss}[%thread] [%F - %M] [%logger{0}:%line] - %msg%n

# [ 로깅 패턴 ]
# %-5level : 로그 레벨, -5는 출력의 고정폭 값(5글자) (INFO, ERROR, DEBUG , 기타 등등이다.)
# %d{날짜 형식 포맷} : 로그 기록시간 %d{yyyy-MM-dd HH:mm:ss} 을 사용하면 된다.
# %thread : 현재 Thread 명 
# %F : 로깅을 발생시킨 파일 명
# %M : 로깅을 발생시킨 메소드 명
# %logger{length} : Logger name을 축약할 수 있다. length는 최대 자릿수이다 (0 = 무제한)
# %line : 로깅이 발생된 라인 넘버
# %msg : - 로그 메시지
# %n : 줄바꿈(new line) 
# ( http://logback.qos.ch/manual/layouts.html )


### wavefront ##############################################
# https://wavefront.surf
wavefront.application.name=spring-study
wavefront.application.service=getting-started